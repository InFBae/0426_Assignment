해시함수의 조건 : 입력에 대한 해시함수의 결과가 항상 동일한 값이어야 함

해시함수의 효율 : 
해시함수의 처리속도가 빠를수록 효율이 좋음
해시함수의 결과의 밀집도가 낮아야 함
해시테이블의 크기가 클수록 빠르지만 메모리가 부담됨

해시함수의 주의점 : 충돌
해시함수가 서로 다른 입력 값에 대해 같은 결과를 반환할 때 충돌이 일어난다.
모든 입력 값에 대해 고유한 해시 값을 만드는 것은 불가능하며 충돌을 피할 수는 없다.
대표적인 충돌의 해결 방법에는 체이닝과 개방주소법이 있다.

체이닝 : 
해시 충돌이 발생하면 연결 리스트로 연결하는 방법
장점 : 해시테이블의 다른 공간을 차지하지 않아 해시테이블의 속도를 저하시키지 않는다.
단점 : 해시테이블 외의 추가적인 저장공간이 필요하다.

개방주소법:
해시 충돌이 발생하면 해시 테이블 안의 다른 빈 공간에 데이터를 넣는 방법
다른 빈 공간을 찾는 방법은 선형탐색, 제곱탐색, 이중해시 등이 있다.
장점 : 추가적인 저장공간이 필요하지 않고 삽입삭제의 오버헤드가 적다.
단점 : 해시테이블에 자료가 많아질수록 성능저하가 커진다.

해시테이블의 공간 사용률이 높아지면 성능저하가 발생하므로 재해싱을 통해 공간 사용률을 낮출 수 있다.
재해싱은 해시테이블의 크기를 늘리고 테이블 내의 모든 데이터를 다시 해싱하는 것이다.